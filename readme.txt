ТЗ:

Неоходимо реализовать управление шаговыми двигателями, подключенных к STM32-VL-Discovery.
Используется FreeRTOS, поэтому предпологается что код управляющий двигателями будет
оформлен ввиде задачи/потока, которая(ый) принимает команды от других потоков и обрабатывает их.

На данный момент предпологается наличие четырех потоков:
 - основной поток (является посредником между остальными потоками)
 - поток управления двигателями (единолично управляет двигателями и всем что с ними связано)
 - поток управления приемопередатчиком (скорее всего будет два потока)
 - поток обслуживающий UART (для вывода отладочных сообщений и для передачи различных команд
   программе; в частности может быть использован для эмуляции приемопередатчика, то есть можно
   с компьютера передавать такие же команды, как из потока управления приемопередатчиком -
   это подходит для тебя, чтобы не покупать еще пару приемопередатчиков и odroid :-) )
   
Поскольку это проект - хобби, поэтому будут использоваться всякие исследовательские подходы, 
в частности для создания задач/потоков и очередей будут использоваться обертки над стандартным
API FreeRTOS. 

Большинство потоков рассматриваются как сервисы (service - обслуживать), которые обслуживают клиентов
(другие потоки). Клиенты ничего не знают о внутренней работе сервисов.

Хотя очередь и не принадлежит какому то конкретному потоку, однако, обычно один поток читает 
сообщения/команды из очереди, а другой(ие) пишет(ут) в эту очередь. Поэтому при создании сервиса/птока  
будет также создоваться очередь для обслуживание клиентов.

Проект "машинка на радиоуправлении" разделен на несколько репозиториев, расположенных на GitHub.
Для самой машинки (программка для STM32-VL-Discovery) используется репозиторий radio_car
(https://github.com/scorpion-afi/radio_car). На нем есть ветка master (для стабильного и работающего кода),
n_rf24l01 (это ветка для моей части работы, по приемопередатчику) и uart (ветка для обслуживания uart).
Создай свою ветку и делай коммиты на ней, и временами, при достижении какого то состояния, сливай её в master.

Также в репозиторий radio_car включен другой репозиторий n_rf24l01-library (как git submodule), реализующий
работу с n_rf24l01 приемопередатчиком. Этот код также используется в linux device driver для odroid
(https://github.com/scorpion-afi/n_rf24l01-linux-driver).

Посмотри на стиль оформления кода и структуру директорий/файлов.

Двигатели, блок питания для них и USB/UART переходник куплю на неделе.



Проект ведется в Eclipse/Ubuntu, компилятор gcc, я настрою Eclipse удаленно, чтобы ты не тратил на это время.
Если Eclipse/Ubuntu не удобен, то можно будет перейти на IAR/Windows.

В Eclipse/Ubuntu есть все удобства для разработки как и в IAR/Windows. Теоретически можно попробывать 
запустить Eclipse/gcc на Windows со всеми сопутсвующими программами и библиотеками.

У бабушки скорее всего не получится запускать Eclipse/Ubuntu.
